// Generated by 'unplugin-auto-import'
export {}
declare global {
  const EffectScope: typeof import('vue')['EffectScope']
  const ElMessageBox: typeof import('element-plus/es')['ElMessageBox']
  const FetchClient: typeof import('./resources/js/services/fetch.js')['FetchClient']
  const capitalize: typeof import('./resources/js/utils/functions.js')['capitalize']
  const checked: typeof import('./resources/js/utils/functions.js')['checked']
  const clone: typeof import('./resources/js/utils/lodash.js')['clone']
  const computed: typeof import('vue')['computed']
  const createApp: typeof import('vue')['createApp']
  const createRouterInstance: typeof import('./resources/js/services/router.js')['createRouterInstance']
  const customRef: typeof import('vue')['customRef']
  const date: typeof import('./resources/js/utils/functions.js')['date']
  const dayjs: typeof import('./resources/js/utils/functions.js')['dayjs']
  const debounce: typeof import('./resources/js/utils/functions.js')['debounce']
  const defineAsyncComponent: typeof import('vue')['defineAsyncComponent']
  const defineComponent: typeof import('vue')['defineComponent']
  const effectScope: typeof import('vue')['effectScope']
  const filterFn: typeof import('./resources/js/utils/lodash.js')['filterFn']
  const formatBytes: typeof import('./resources/js/utils/functions.js')['formatBytes']
  const fromNow: typeof import('./resources/js/utils/functions.js')['fromNow']
  const get: typeof import('./resources/js/utils/lodash.js')['get']
  const getCookie: typeof import('./resources/js/utils/functions.js')['getCookie']
  const getCurrentInstance: typeof import('vue')['getCurrentInstance']
  const getCurrentScope: typeof import('vue')['getCurrentScope']
  const getFields: typeof import('./resources/js/services/form/index.js')['getFields']
  const getLabel: typeof import('./resources/js/utils/functions.js')['getLabel']
  const getTime: typeof import('./resources/js/utils/functions.js')['getTime']
  const h: typeof import('vue')['h']
  const has: typeof import('./resources/js/utils/lodash.js')['has']
  const inject: typeof import('vue')['inject']
  const intersectionBy: typeof import('./resources/js/utils/functions.js')['intersectionBy']
  const isEmpty: typeof import('./resources/js/utils/lodash.js')['isEmpty']
  const isNumber: typeof import('./resources/js/utils/lodash.js')['isNumber']
  const isProxy: typeof import('vue')['isProxy']
  const isReactive: typeof import('vue')['isReactive']
  const isReadonly: typeof import('vue')['isReadonly']
  const isRef: typeof import('vue')['isRef']
  const isString: typeof import('./resources/js/utils/lodash.js')['isString']
  const map: typeof import('./resources/js/utils/lodash.js')['map']
  const markRaw: typeof import('vue')['markRaw']
  const nextTick: typeof import('vue')['nextTick']
  const onActivated: typeof import('vue')['onActivated']
  const onBeforeMount: typeof import('vue')['onBeforeMount']
  const onBeforeUnmount: typeof import('vue')['onBeforeUnmount']
  const onBeforeUpdate: typeof import('vue')['onBeforeUpdate']
  const onClickOutside: typeof import('@vueuse/core')['onClickOutside']
  const onDeactivated: typeof import('vue')['onDeactivated']
  const onErrorCaptured: typeof import('vue')['onErrorCaptured']
  const onKeyStroke: typeof import('@vueuse/core')['onKeyStroke']
  const onMounted: typeof import('vue')['onMounted']
  const onRenderTracked: typeof import('vue')['onRenderTracked']
  const onRenderTriggered: typeof import('vue')['onRenderTriggered']
  const onScopeDispose: typeof import('vue')['onScopeDispose']
  const onServerPrefetch: typeof import('vue')['onServerPrefetch']
  const onUnmounted: typeof import('vue')['onUnmounted']
  const onUpdated: typeof import('vue')['onUpdated']
  const pickBy: typeof import('./resources/js/utils/lodash.js')['pickBy']
  const provide: typeof import('vue')['provide']
  const reactive: typeof import('vue')['reactive']
  const readonly: typeof import('vue')['readonly']
  const ref: typeof import('vue')['ref']
  const resolveComponent: typeof import('vue')['resolveComponent']
  const resolveDirective: typeof import('vue')['resolveDirective']
  const set: typeof import('./resources/js/utils/lodash.js')['set']
  const shallowReactive: typeof import('vue')['shallowReactive']
  const shallowReadonly: typeof import('vue')['shallowReadonly']
  const shallowRef: typeof import('vue')['shallowRef']
  const some: typeof import('./resources/js/utils/lodash.js')['some']
  const split: typeof import('./resources/js/utils/lodash.js')['split']
  const startCase: typeof import('./resources/js/utils/lodash.js')['startCase']
  const toRaw: typeof import('vue')['toRaw']
  const toRef: typeof import('vue')['toRef']
  const toRefs: typeof import('vue')['toRefs']
  const triggerRef: typeof import('vue')['triggerRef']
  const uniqueId: typeof import('./resources/js/utils/lodash.js')['uniqueId']
  const unref: typeof import('vue')['unref']
  const useAttrs: typeof import('vue')['useAttrs']
  const useClipboard: typeof import('@vueuse/core')['useClipboard']
  const useCssModule: typeof import('vue')['useCssModule']
  const useCssVars: typeof import('vue')['useCssVars']
  const useEventSource: typeof import('@vueuse/core')['useEventSource']
  const useFieldCondition: typeof import('./resources/js/services/form/condition.js')['useFieldCondition']
  const useFormField: typeof import('./resources/js/services/form/field.js')['useFormField']
  const useFormResource: typeof import('./resources/js/services/resource.js')['useFormResource']
  const usePermission: typeof import('@vueuse/core')['usePermission']
  const useResource: typeof import('./resources/js/services/resource.js')['useResource']
  const useResourceForm: typeof import('./resources/js/services/form/index.js')['useResourceForm']
  const useSlots: typeof import('vue')['useSlots']
  const useTitle: typeof import('@vueuse/core')['useTitle']
  const watch: typeof import('vue')['watch']
  const watchEffect: typeof import('vue')['watchEffect']
  const watchPostEffect: typeof import('vue')['watchPostEffect']
  const watchSyncEffect: typeof import('vue')['watchSyncEffect']
}
